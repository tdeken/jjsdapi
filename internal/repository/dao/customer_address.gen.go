// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jjsdapi/internal/repository/model"
)

func newCustomerAddress(db *gorm.DB, opts ...gen.DOOption) customerAddress {
	_customerAddress := customerAddress{}

	_customerAddress.customerAddressDo.UseDB(db, opts...)
	_customerAddress.customerAddressDo.UseModel(&model.CustomerAddress{})

	tableName := _customerAddress.customerAddressDo.TableName()
	_customerAddress.ALL = field.NewAsterisk(tableName)
	_customerAddress.ID = field.NewInt64(tableName, "id")
	_customerAddress.CreatedAt = field.NewInt64(tableName, "created_at")
	_customerAddress.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_customerAddress.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_customerAddress.CustomerID = field.NewInt64(tableName, "customer_id")
	_customerAddress.Title = field.NewString(tableName, "title")
	_customerAddress.Address = field.NewString(tableName, "address")
	_customerAddress.Tel = field.NewString(tableName, "tel")

	_customerAddress.fillFieldMap()

	return _customerAddress
}

// customerAddress 客户配送地址表
type customerAddress struct {
	customerAddressDo customerAddressDo

	ALL        field.Asterisk
	ID         field.Int64
	CreatedAt  field.Int64
	UpdatedAt  field.Int64
	DeletedAt  field.Int64
	CustomerID field.Int64  // 客户id
	Title      field.String // 商店名称
	Address    field.String // 配送地址
	Tel        field.String // 联系电话

	fieldMap map[string]field.Expr
}

func (c customerAddress) Table(newTableName string) *customerAddress {
	c.customerAddressDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerAddress) As(alias string) *customerAddress {
	c.customerAddressDo.DO = *(c.customerAddressDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerAddress) updateTableName(table string) *customerAddress {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.DeletedAt = field.NewInt64(table, "deleted_at")
	c.CustomerID = field.NewInt64(table, "customer_id")
	c.Title = field.NewString(table, "title")
	c.Address = field.NewString(table, "address")
	c.Tel = field.NewString(table, "tel")

	c.fillFieldMap()

	return c
}

func (c *customerAddress) WithContext(ctx context.Context) *customerAddressDo {
	return c.customerAddressDo.WithContext(ctx)
}

func (c customerAddress) TableName() string { return c.customerAddressDo.TableName() }

func (c customerAddress) Alias() string { return c.customerAddressDo.Alias() }

func (c customerAddress) Columns(cols ...field.Expr) gen.Columns {
	return c.customerAddressDo.Columns(cols...)
}

func (c *customerAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerAddress) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["title"] = c.Title
	c.fieldMap["address"] = c.Address
	c.fieldMap["tel"] = c.Tel
}

func (c customerAddress) clone(db *gorm.DB) customerAddress {
	c.customerAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerAddress) replaceDB(db *gorm.DB) customerAddress {
	c.customerAddressDo.ReplaceDB(db)
	return c
}

type customerAddressDo struct{ gen.DO }

// GetByID
// SELECT * FROM @@table WHERE id=@id
func (c customerAddressDo) GetByID(id int) (result *model.CustomerAddress, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM customer_address WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c customerAddressDo) Debug() *customerAddressDo {
	return c.withDO(c.DO.Debug())
}

func (c customerAddressDo) WithContext(ctx context.Context) *customerAddressDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerAddressDo) ReadDB() *customerAddressDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerAddressDo) WriteDB() *customerAddressDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerAddressDo) Session(config *gorm.Session) *customerAddressDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerAddressDo) Clauses(conds ...clause.Expression) *customerAddressDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerAddressDo) Returning(value interface{}, columns ...string) *customerAddressDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerAddressDo) Not(conds ...gen.Condition) *customerAddressDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerAddressDo) Or(conds ...gen.Condition) *customerAddressDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerAddressDo) Select(conds ...field.Expr) *customerAddressDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerAddressDo) Where(conds ...gen.Condition) *customerAddressDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerAddressDo) Order(conds ...field.Expr) *customerAddressDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerAddressDo) Distinct(cols ...field.Expr) *customerAddressDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerAddressDo) Omit(cols ...field.Expr) *customerAddressDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerAddressDo) Join(table schema.Tabler, on ...field.Expr) *customerAddressDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) *customerAddressDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) *customerAddressDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerAddressDo) Group(cols ...field.Expr) *customerAddressDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerAddressDo) Having(conds ...gen.Condition) *customerAddressDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerAddressDo) Limit(limit int) *customerAddressDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerAddressDo) Offset(offset int) *customerAddressDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *customerAddressDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerAddressDo) Unscoped() *customerAddressDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerAddressDo) Create(values ...*model.CustomerAddress) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerAddressDo) CreateInBatches(values []*model.CustomerAddress, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerAddressDo) Save(values ...*model.CustomerAddress) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerAddressDo) First() (*model.CustomerAddress, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerAddress), nil
	}
}

func (c customerAddressDo) Take() (*model.CustomerAddress, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerAddress), nil
	}
}

func (c customerAddressDo) Last() (*model.CustomerAddress, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerAddress), nil
	}
}

func (c customerAddressDo) Find() ([]*model.CustomerAddress, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomerAddress), err
}

func (c customerAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerAddress, err error) {
	buf := make([]*model.CustomerAddress, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerAddressDo) FindInBatches(result *[]*model.CustomerAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerAddressDo) Attrs(attrs ...field.AssignExpr) *customerAddressDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerAddressDo) Assign(attrs ...field.AssignExpr) *customerAddressDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerAddressDo) Joins(fields ...field.RelationField) *customerAddressDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerAddressDo) Preload(fields ...field.RelationField) *customerAddressDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerAddressDo) FirstOrInit() (*model.CustomerAddress, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerAddress), nil
	}
}

func (c customerAddressDo) FirstOrCreate() (*model.CustomerAddress, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerAddress), nil
	}
}

func (c customerAddressDo) FindByPage(offset int, limit int) (result []*model.CustomerAddress, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerAddressDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerAddressDo) Delete(models ...*model.CustomerAddress) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerAddressDo) withDO(do gen.Dao) *customerAddressDo {
	c.DO = *do.(*gen.DO)
	return c
}
