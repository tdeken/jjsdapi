// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jjsdapi/internal/repository/model"
)

func newGoodsSku(db *gorm.DB, opts ...gen.DOOption) goodsSku {
	_goodsSku := goodsSku{}

	_goodsSku.goodsSkuDo.UseDB(db, opts...)
	_goodsSku.goodsSkuDo.UseModel(&model.GoodsSku{})

	tableName := _goodsSku.goodsSkuDo.TableName()
	_goodsSku.ALL = field.NewAsterisk(tableName)
	_goodsSku.ID = field.NewInt64(tableName, "id")
	_goodsSku.CreatedAt = field.NewInt64(tableName, "created_at")
	_goodsSku.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_goodsSku.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_goodsSku.GoodsID = field.NewInt64(tableName, "goods_id")
	_goodsSku.Mark = field.NewString(tableName, "mark")
	_goodsSku.Capacity = field.NewString(tableName, "capacity")
	_goodsSku.Remark = field.NewString(tableName, "remark")
	_goodsSku.Format = field.NewString(tableName, "format")
	_goodsSku.Unit = field.NewString(tableName, "unit")
	_goodsSku.Pp = field.NewFloat64(tableName, "pp")
	_goodsSku.Wp = field.NewFloat64(tableName, "wp")
	_goodsSku.Rp = field.NewFloat64(tableName, "rp")
	_goodsSku.Stock = field.NewInt64(tableName, "stock")
	_goodsSku.Number = field.NewString(tableName, "number")

	_goodsSku.fillFieldMap()

	return _goodsSku
}

type goodsSku struct {
	goodsSkuDo goodsSkuDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Int64
	GoodsID   field.Int64   // 商品id
	Mark      field.String  // 可售商品唯一标识
	Capacity  field.String  // 商品重量
	Remark    field.String  // 商品名称备注
	Format    field.String  // 商品规格
	Unit      field.String  // 单位
	Pp        field.Float64 // 采购价
	Wp        field.Float64 // 批发价
	Rp        field.Float64 // 零售价
	Stock     field.Int64   // 库存
	Number    field.String  // 商品编码

	fieldMap map[string]field.Expr
}

func (g goodsSku) Table(newTableName string) *goodsSku {
	g.goodsSkuDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodsSku) As(alias string) *goodsSku {
	g.goodsSkuDo.DO = *(g.goodsSkuDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodsSku) updateTableName(table string) *goodsSku {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.CreatedAt = field.NewInt64(table, "created_at")
	g.UpdatedAt = field.NewInt64(table, "updated_at")
	g.DeletedAt = field.NewInt64(table, "deleted_at")
	g.GoodsID = field.NewInt64(table, "goods_id")
	g.Mark = field.NewString(table, "mark")
	g.Capacity = field.NewString(table, "capacity")
	g.Remark = field.NewString(table, "remark")
	g.Format = field.NewString(table, "format")
	g.Unit = field.NewString(table, "unit")
	g.Pp = field.NewFloat64(table, "pp")
	g.Wp = field.NewFloat64(table, "wp")
	g.Rp = field.NewFloat64(table, "rp")
	g.Stock = field.NewInt64(table, "stock")
	g.Number = field.NewString(table, "number")

	g.fillFieldMap()

	return g
}

func (g *goodsSku) WithContext(ctx context.Context) *goodsSkuDo { return g.goodsSkuDo.WithContext(ctx) }

func (g goodsSku) TableName() string { return g.goodsSkuDo.TableName() }

func (g goodsSku) Alias() string { return g.goodsSkuDo.Alias() }

func (g goodsSku) Columns(cols ...field.Expr) gen.Columns { return g.goodsSkuDo.Columns(cols...) }

func (g *goodsSku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodsSku) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 15)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["goods_id"] = g.GoodsID
	g.fieldMap["mark"] = g.Mark
	g.fieldMap["capacity"] = g.Capacity
	g.fieldMap["remark"] = g.Remark
	g.fieldMap["format"] = g.Format
	g.fieldMap["unit"] = g.Unit
	g.fieldMap["pp"] = g.Pp
	g.fieldMap["wp"] = g.Wp
	g.fieldMap["rp"] = g.Rp
	g.fieldMap["stock"] = g.Stock
	g.fieldMap["number"] = g.Number
}

func (g goodsSku) clone(db *gorm.DB) goodsSku {
	g.goodsSkuDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodsSku) replaceDB(db *gorm.DB) goodsSku {
	g.goodsSkuDo.ReplaceDB(db)
	return g
}

type goodsSkuDo struct{ gen.DO }

func (g goodsSkuDo) Debug() *goodsSkuDo {
	return g.withDO(g.DO.Debug())
}

func (g goodsSkuDo) WithContext(ctx context.Context) *goodsSkuDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodsSkuDo) ReadDB() *goodsSkuDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodsSkuDo) WriteDB() *goodsSkuDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodsSkuDo) Session(config *gorm.Session) *goodsSkuDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodsSkuDo) Clauses(conds ...clause.Expression) *goodsSkuDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodsSkuDo) Returning(value interface{}, columns ...string) *goodsSkuDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodsSkuDo) Not(conds ...gen.Condition) *goodsSkuDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodsSkuDo) Or(conds ...gen.Condition) *goodsSkuDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodsSkuDo) Select(conds ...field.Expr) *goodsSkuDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodsSkuDo) Where(conds ...gen.Condition) *goodsSkuDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodsSkuDo) Order(conds ...field.Expr) *goodsSkuDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodsSkuDo) Distinct(cols ...field.Expr) *goodsSkuDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodsSkuDo) Omit(cols ...field.Expr) *goodsSkuDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodsSkuDo) Join(table schema.Tabler, on ...field.Expr) *goodsSkuDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodsSkuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goodsSkuDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodsSkuDo) RightJoin(table schema.Tabler, on ...field.Expr) *goodsSkuDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodsSkuDo) Group(cols ...field.Expr) *goodsSkuDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodsSkuDo) Having(conds ...gen.Condition) *goodsSkuDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodsSkuDo) Limit(limit int) *goodsSkuDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodsSkuDo) Offset(offset int) *goodsSkuDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodsSkuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goodsSkuDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodsSkuDo) Unscoped() *goodsSkuDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodsSkuDo) Create(values ...*model.GoodsSku) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodsSkuDo) CreateInBatches(values []*model.GoodsSku, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodsSkuDo) Save(values ...*model.GoodsSku) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodsSkuDo) First() (*model.GoodsSku, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) Take() (*model.GoodsSku, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) Last() (*model.GoodsSku, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) Find() ([]*model.GoodsSku, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoodsSku), err
}

func (g goodsSkuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoodsSku, err error) {
	buf := make([]*model.GoodsSku, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodsSkuDo) FindInBatches(result *[]*model.GoodsSku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodsSkuDo) Attrs(attrs ...field.AssignExpr) *goodsSkuDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodsSkuDo) Assign(attrs ...field.AssignExpr) *goodsSkuDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodsSkuDo) Joins(fields ...field.RelationField) *goodsSkuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodsSkuDo) Preload(fields ...field.RelationField) *goodsSkuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodsSkuDo) FirstOrInit() (*model.GoodsSku, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) FirstOrCreate() (*model.GoodsSku, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) FindByPage(offset int, limit int) (result []*model.GoodsSku, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodsSkuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodsSkuDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodsSkuDo) Delete(models ...*model.GoodsSku) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodsSkuDo) withDO(do gen.Dao) *goodsSkuDo {
	g.DO = *do.(*gen.DO)
	return g
}
